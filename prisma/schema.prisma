// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Profile {
  id     String @id
  userId String @unique @default(uuid())

  name  String
  image String @db.Text
  email String @db.Text

  servers        Server[]
  members        Member[]
  channels       Channel[]
  directMessages DirectMessage[]

  conversationInitiated Conversation[] @relation("initiator")
  conversationReceived  Conversation[] @relation("receiver")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Server {
  id         String @id @default(uuid())
  name       String
  image      String @db.Text
  inviteCode String @unique

  members  Member[]
  channels Channel[]

  profileId String
  Profile   Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([profileId])
}

enum ChannelType {
  TEXT
  AUDIO
  VIDEO
}

model Channel {
  id   String      @id @default(uuid())
  name String
  type ChannelType @default(TEXT)

  serverId String
  Server   Server @relation(fields: [serverId], references: [id], onDelete: Cascade)

  profileId String
  Profile   Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  channelMessages ChannelMessage[]

  @@index([profileId])
  @@index([serverId])
}

enum MemberRole {
  ADMIN
  MODERATOR
  GUEST
}

model Member {
  id   String     @id @default(uuid())
  role MemberRole @default(GUEST)

  profileId String
  Profile   Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  serverId String
  Server   Server @relation(fields: [serverId], references: [id], onDelete: Cascade)

  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  channelMessages ChannelMessage[]

  @@index([profileId])
  @@index([serverId])
}

model ChannelMessage {
  id      String  @id @default(uuid())
  content String  @db.Text
  fileUrl String? @db.Text

  deleted Boolean @default(false)

  memberId String
  member   Member @relation(fields: [memberId], references: [id], onDelete: Cascade)

  channelId String
  channel   Channel @relation(fields: [channelId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model DirectMessage {
  id      String  @id @default(uuid())
  content String  @db.Text
  fileUrl String? @db.Text

  deleted Boolean @default(false)

  profileId String
  profile   Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  conversationId String
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Conversation {
  id String @id @default(uuid())

  deleted Boolean @default(false)

  directMessages DirectMessage[]

  initiatorId String
  initiator   Profile @relation("initiator", fields: [initiatorId], references: [id], onDelete: Cascade)

  receiverId String
  receiver   Profile @relation("receiver", fields: [receiverId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
